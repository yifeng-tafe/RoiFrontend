{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Settings from \"../constants/Settings\";\nimport { RoiGetPeople, RoiDeletePerson, RoiAddPerson, RoiGetDepartments, RoiUpdatePerson, RoiGetPerson } from \"../utils/Api\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextLabel } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ViewPersonScreen(props) {\n  var _person$department$na, _person$department;\n\n  var personTemplate = {\n    id: 0,\n    name: \"DEFAULT\",\n    phone: \"\",\n    departmentId: null,\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    contry: \"\",\n    department: null\n  };\n\n  var _React$useState = React.useState(personTemplate),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      person = _React$useState2[0],\n      setPerson = _React$useState2[1];\n\n  React.useEffect(refreshPerson, []);\n\n  function refreshPerson() {\n    var id = props.route.params.id;\n    RoiGetPerson(id).then(function (data) {\n      if (data) setPerson(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get person from the server\");\n      props.navigation.navigate(\"ViewPeople\");\n    });\n    setPerson(person);\n  }\n\n  function showAddPerson() {\n    console.log(\"show add person\");\n  }\n\n  function deletePerson(person) {\n    PopupOkCancel(\"Delete person?\", \"Are you sure you want to delete \" + person.name + \"?\", function () {\n      RoiDeletePerson(person.id).then(function (data) {\n        PopupOk(\"Person deleted\", person.name + \" has been deleted.\");\n        refreshPersonList();\n      }).catch(function (error) {\n        PopupOk(\"Error\", error);\n      });\n    }, function () {});\n  }\n\n  return _jsx(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: _jsxs(ScrollView, {\n      styel: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsxs(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: [\"Person: \", person.name]\n      }), _jsxs(View, {\n        style: Styles.form,\n        children: [_jsxs(View, {\n          style: Styles.fieldSet,\n          children: [_jsx(TextParagraph, {\n            style: Styles.legend,\n            children: \"Details\"\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"Name:\"\n            }), _jsx(TextParagraph, {\n              children: person.name\n            })]\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"Phone:\"\n            }), _jsx(TextParagraph, {\n              children: person.phone\n            })]\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"Department:\"\n            }), _jsx(TextParagraph, {\n              children: (_person$department$na = (_person$department = person.department) == null ? void 0 : _person$department.name) != null ? _person$department$na : \"---\"\n            })]\n          })]\n        }), _jsxs(View, {\n          style: Styles.fieldSet,\n          children: [_jsx(TextParagraph, {\n            style: Styles.legend,\n            children: \"Address\"\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"Street:\"\n            }), _jsx(TextParagraph, {\n              children: person.street\n            })]\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"City:\"\n            }), _jsx(TextParagraph, {\n              children: person.city\n            })]\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"State:\"\n            }), _jsx(TextParagraph, {\n              children: person.state\n            })]\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"ZIP:\"\n            }), _jsx(TextParagraph, {\n              children: person.zip\n            })]\n          }), _jsxs(View, {\n            style: Styles.formRow,\n            children: [_jsx(TextLabel, {\n              children: \"Country:\"\n            }), _jsx(TextParagraph, {\n              children: person.country\n            })]\n          })]\n        })]\n      }), _jsxs(View, {\n        style: Styles.personButtonContainer,\n        children: [_jsx(MyButton, {\n          text: \"Edit\",\n          type: \"major\",\n          size: \"medium\",\n          buttonStyle: Styles.homeButton\n        }), _jsx(MyButton, {\n          text: \"Delete\",\n          type: \"default\",\n          size: \"medium\",\n          onPress: deletePerson,\n          buttonStyle: Styles.homeButton\n        })]\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","SafeAreaView","Settings","RoiGetPeople","RoiDeletePerson","RoiAddPerson","RoiGetDepartments","RoiUpdatePerson","RoiGetPerson","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextLabel","Styles","MyButton","ViewPersonScreen","props","personTemplate","id","name","phone","departmentId","street","city","state","zip","contry","department","useState","person","setPerson","useEffect","refreshPerson","route","params","then","data","catch","error","navigation","navigate","showAddPerson","console","log","deletePerson","refreshPersonList","safeAreaView","container","contentContainer","marginTop","form","fieldSet","legend","formRow","country","personButtonContainer","homeButton"],"sources":["C:/Users/ioris/Desktop/RoiFrontend/screens/ViewPersonScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiGetPeople, RoiDeletePerson, RoiAddPerson, RoiGetDepartments, RoiUpdatePerson, RoiGetPerson } from '../utils/Api';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextLabel } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\n\n\nexport default function ViewPersonScreen(props) {\n\n  // Set up a default Person object\n  const personTemplate = {\n    id: 0,\n    name: \"DEFAULT\",\n    phone: \"\",\n    departmentId: null,\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    contry: \"\",\n    department: null,\n  }  \n\n  // State - data for this componet\n\n  // Store person in state\n  const [person, setPerson] = React.useState(personTemplate)\n  \n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPerson, [])\n\n\n  // Refresh the person data - call the API\n  function refreshPerson(){\n    \n    // Get person ID passed to this screen (via props)\n    //const id = props.route.params.id\n    const id = props.route.params.id\n    \n    //Get data from the API\n    RoiGetPerson(id)\n      // Success\n      .then(data => {\n        // Store results in state variable\n        if (data) setPerson(data)\n      })\n      // Error\n      .catch(error =>{\n        \n        // Display error \n        PopupOk(\"API Error\", \"Could not get person from the server\")\n\n        // Optional: Navigate back to view people\n        props.navigation.navigate(\"ViewPeople\")\n      })\n\n    // Store results in state variable\n    setPerson(person)\n\n  }\n\n  function showAddPerson() {\n    console.log(\"show add person\")\n  }\n\n  \n\n  \n  /**\n   * Delete a person from the database.\n   * @param {Person} person The person to delete. \n   */\n  function deletePerson(person){\n\n    // Check if person should be deleted (confirm with user)\n    PopupOkCancel(\n\n      // Title and message\n      \"Delete person?\",\n      `Are you sure you want to delete ${person.name}?`,\n      \n      // Ok - delete the person\n      () => {\n        \n        // Delete the person using the API\n        RoiDeletePerson(person.id)\n          .then(data => {\n            // Show confirmation that the person has bee deleted\n            PopupOk(\"Person deleted\", `${person.name} has been deleted.`)\n            // Refresh the person list\n            refreshPersonList()\n        \n        })\n          .catch(error => {\n\n            // Diplay error to user\n            PopupOk(\"Error\", error)\n          })\n\n        },  \n      // Cancel - do nothing\n      () => {}\n\n      )\n  }\n  \n\n  \n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      <ScrollView styel={Styles.container} contentContainerStyle={Styles.contentContainer}>\n        \n        <TextH1 style={{marginTop:0}}>Person: {person.name}</TextH1>\n\n        <View style={Styles.form}>\n          \n          <View style={Styles.fieldSet}>\n            <TextParagraph style={Styles.legend}>Details</TextParagraph>\n\n            <View style = {Styles.formRow}>\n              <TextLabel>Name:</TextLabel>\n              <TextParagraph>{person.name}</TextParagraph>\n            </View>\n\n            <View style = {Styles.formRow}>\n              <TextLabel>Phone:</TextLabel>\n              <TextParagraph>{person.phone}</TextParagraph>\n            </View>\n\n            <View style = {Styles.formRow}>\n              <TextLabel>Department:</TextLabel>\n              {/* <TextParagraph>{person.department ? person.department.name : \"<>\"}</TextParagraph> */}\n              <TextParagraph>{person.department?.name ??\"---\"}</TextParagraph>\n            </View>\n          </View>\n          \n          <View style={Styles.fieldSet}>\n            <TextParagraph style={Styles.legend}>Address</TextParagraph>\n            <View style = {Styles.formRow}>\n              <TextLabel>Street:</TextLabel>\n              <TextParagraph>{person.street}</TextParagraph>\n            </View>\n            <View style = {Styles.formRow}>\n              <TextLabel>City:</TextLabel>\n              <TextParagraph>{person.city}</TextParagraph>\n            </View>\n            <View style = {Styles.formRow}>\n              <TextLabel>State:</TextLabel>\n              <TextParagraph>{person.state}</TextParagraph>\n            </View>\n            <View style = {Styles.formRow}>\n              <TextLabel>ZIP:</TextLabel>\n              <TextParagraph>{person.zip}</TextParagraph>\n            </View>\n            <View style = {Styles.formRow}>\n              <TextLabel>Country:</TextLabel>\n              <TextParagraph>{person.country}</TextParagraph>\n            </View>\n           \n          </View>\n        </View> \n        <View style={Styles.personButtonContainer}>\n          <MyButton\n            text=\"Edit\"\n            type=\"major\"    // default*|major|minor\n            size=\"medium\"      // small|medium*|large\n            //onPress={showViewPeople}\n            buttonStyle={Styles.homeButton}\n          />\n          <MyButton\n            text=\"Delete\"\n            type=\"default\"    // default*|major|minor\n            size=\"medium\"      // small|medium*|large\n            onPress={deletePerson}\n            buttonStyle={Styles.homeButton}\n          />\n        </View>\n\n\n      </ScrollView>\n\n\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}