{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Settings from \"../constants/Settings\";\nimport { RoiGetPeople } from \"../utils/Api\";\nimport { PopupOk } from \"../utils/Popup\";\nimport { TextParagraph, TextH1 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      people = _React$useState2[0],\n      setPeople = _React$useState2[1];\n\n  React.useEffect(refreshPersonList, []);\n\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n    setPeople(people);\n  }\n\n  function showAddPerson() {\n    console.log(\"show add person\");\n    setPeople([].concat(_toConsumableArray(people), [\"New Person\"]));\n  }\n\n  function displayPeople() {\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n\n      return _jsxs(View, {\n        style: Styles.personListItem,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            children: p.name\n          }), _jsx(TextParagraph, {\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : \"---\"\n          }), _jsx(TextParagraph, {\n            children: p.phone\n          })]\n        }), _jsx(View, {\n          style: Styles.personListItemButtons\n        })]\n      }, p.id);\n    });\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"defualt\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      styel: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        stype: Styles.personList,\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","SafeAreaView","Settings","RoiGetPeople","PopupOk","TextParagraph","TextH1","Styles","MyButton","ViewPeopleScreen","props","useState","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showAddPerson","displayPeople","map","p","personListItem","personListItemDetails","name","department","phone","personListItemButtons","id","safeAreaView","personButtonContainer","container","contentContainer","marginTop","personList"],"sources":["C:/Users/ioris/Desktop/RoiFrontend/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiGetPeople } from '../utils/Api';\nimport { PopupOk } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\n\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this componet\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n  \n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n\n  // Refresh the person list data - call the API\n  function refreshPersonList(){\n\n    console.log(\"refresh person list\")\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error =>{\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n    // Store results in state variable\n    setPeople(people)\n\n  }\n\n  function showAddPerson() {\n    console.log(\"show add person\")\n\n    setPeople([...people, \"New Person\"])\n  }\n  \n  // Display all people data\n  function displayPeople(){\n    // Loop through each item and turn into appropriate output and tehn return the result\n    return people.map(p => {\n\n      // Create an output view for each item\n      return( \n        <View key={p.id} style={Styles.personListItem}>\n          <View style={Styles.personListItemDetails}>\n            <TextParagraph>{p.name}</TextParagraph>\n            <TextParagraph>{p.department?.name ?? \"---\"}</TextParagraph>\n            <TextParagraph>{p.phone}</TextParagraph>\n          </View>\n          <View style={Styles.personListItemButtons}>\n            {/* buttons */}\n\n          </View>\n          \n        </View>\n      )\n    })\n  \n  }\n  \n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text = \"+Add new person\"\n          type=\"major\"  // default*|major|minor\n          size=\"small\"  // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n        text = \"Refresh\"\n        type=\"defualt\"  // default*|major|minor\n        size=\"small\"  // small|medium*|large\n        onPress={refreshPersonList}\n        />\n      </View>\n\n      <ScrollView styel={Styles.container} contentContainerStyle={Styles.contentContainer}>\n        \n      <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n        <View stype={Styles.personList}>\n          {displayPeople()}\n\n        </View>\n      </ScrollView>\n\n\n    </SafeAreaView>\n  );\n}"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AAGA,OAAOC,QAAP;AACA,SAASC,YAAT;AACA,SAASC,OAAT;AAGA,SAASC,aAAT,EAAwBC,MAAxB;AACA,OAAOC,MAAP;AACA,SAASC,QAAT;;;AAGA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;EAK9C,sBAA4BV,KAAK,CAACW,QAAN,CAAe,EAAf,CAA5B;EAAA;EAAA,IAAOC,MAAP;EAAA,IAAeC,SAAf;;EAIAb,KAAK,CAACc,SAAN,CAAgBC,iBAAhB,EAAmC,EAAnC;;EAIA,SAASA,iBAAT,GAA4B;IAE1BC,OAAO,CAACC,GAAR,CAAY,qBAAZ;IAGAd,YAAY,GAETe,IAFH,CAEQ,UAAAC,IAAI,EAAI;MAEZN,SAAS,CAACM,IAAD,CAAT;IACD,CALH,EAOGC,KAPH,CAOS,UAAAC,KAAK,EAAG;MACbjB,OAAO,CAAC,WAAD,EAAc,sCAAd,CAAP;IACD,CATH;IAYAS,SAAS,CAACD,MAAD,CAAT;EAED;;EAED,SAASU,aAAT,GAAyB;IACvBN,OAAO,CAACC,GAAR,CAAY,iBAAZ;IAEAJ,SAAS,8BAAKD,MAAL,IAAa,YAAb,GAAT;EACD;;EAGD,SAASW,aAAT,GAAwB;IAEtB,OAAOX,MAAM,CAACY,GAAP,CAAW,UAAAC,CAAC,EAAI;MAAA;;MAGrB,OACE,MAAC,IAAD;QAAiB,KAAK,EAAElB,MAAM,CAACmB,cAA/B;QAAA,WACE,MAAC,IAAD;UAAM,KAAK,EAAEnB,MAAM,CAACoB,qBAApB;UAAA,WACE,KAAC,aAAD;YAAA,UAAgBF,CAAC,CAACG;UAAlB,EADF,EAEE,KAAC,aAAD;YAAA,iDAAgBH,CAAC,CAACI,UAAlB,qBAAgB,cAAcD,IAA9B,iCAAsC;UAAtC,EAFF,EAGE,KAAC,aAAD;YAAA,UAAgBH,CAAC,CAACK;UAAlB,EAHF;QAAA,EADF,EAME,KAAC,IAAD;UAAM,KAAK,EAAEvB,MAAM,CAACwB;QAApB,EANF;MAAA,GAAWN,CAAC,CAACO,EAAb,CADF;IAcD,CAjBM,CAAP;EAmBD;;EAGD,OACE,MAAC,YAAD;IAAc,KAAK,EAAEzB,MAAM,CAAC0B,YAA5B;IAAA,WACE,MAAC,IAAD;MAAM,KAAK,EAAE1B,MAAM,CAAC2B,qBAApB;MAAA,WACE,KAAC,QAAD;QACE,IAAI,EAAG,iBADT;QAEE,IAAI,EAAC,OAFP;QAGE,IAAI,EAAC,OAHP;QAIE,OAAO,EAAEZ;MAJX,EADF,EAOE,KAAC,QAAD;QACA,IAAI,EAAG,SADP;QAEA,IAAI,EAAC,SAFL;QAGA,IAAI,EAAC,OAHL;QAIA,OAAO,EAAEP;MAJT,EAPF;IAAA,EADF,EAgBE,MAAC,UAAD;MAAY,KAAK,EAAER,MAAM,CAAC4B,SAA1B;MAAqC,qBAAqB,EAAE5B,MAAM,CAAC6B,gBAAnE;MAAA,WAEA,KAAC,MAAD;QAAQ,KAAK,EAAE;UAACC,SAAS,EAAC;QAAX,CAAf;QAAA;MAAA,EAFA,EAGE,KAAC,IAAD;QAAM,KAAK,EAAE9B,MAAM,CAAC+B,UAApB;QAAA,UACGf,aAAa;MADhB,EAHF;IAAA,EAhBF;EAAA,EADF;AA6BD"},"metadata":{},"sourceType":"module"}