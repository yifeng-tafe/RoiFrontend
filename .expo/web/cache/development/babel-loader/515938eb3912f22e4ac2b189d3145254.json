{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { showMessage } from \"react-native-flash-message\";\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Settings from \"../constants/Settings\";\nimport { RoiGetPeople, RoiDeletePerson, RoiAddPerson, RoiGetDepartments, RoiUpdatePerson, RoiGetPerson } from \"../utils/Api\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      people = _React$useState2[0],\n      setPeople = _React$useState2[1];\n\n  React.useEffect(refreshPersonList, []);\n\n  function refreshPersonList() {\n    displayConnectionMessage();\n    if (!people) return;\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n    setPeople(people);\n  }\n\n  function showAddPerson() {\n    props.navigation.replace(\"Root\", {\n      screen: \"AddPerson\"\n    });\n  }\n\n  function showViewPerson(person) {\n    props.navigation.navigate(\"ViewPerson\", {\n      id: person.id\n    });\n  }\n\n  function showEditPerson(person) {\n    props.navigation.navigate(\"EditPerson\", {\n      id: person.id\n    });\n  }\n\n  function deletePerson(person) {\n    PopupOkCancel(\"Delete person?\", \"Are you sure you want to delete \" + person.name + \"?\", function () {\n      RoiDeletePerson(person.id).then(function (data) {\n        PopupOk(\"Person deleted\", person.name + \" has been deleted.\");\n        refreshPersonList();\n      }).catch(function (error) {\n        PopupOk(\"Error\", error);\n      });\n    }, function () {});\n  }\n\n  function displayConnectionMessage() {\n    NetInfo.fetch().then(function (status) {\n      if (!status.isConnected) {\n        showMessage({\n          message: \"No internet connection\",\n          description: \"You will only see cached data until you have an active internet connection again.\",\n          type: \"warning\",\n          duration: 4000\n        });\n      }\n    });\n  }\n\n  function displayPeople() {\n    if (!people) return;\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n\n      return _jsxs(View, {\n        style: Styles.personListItem,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: p.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : \"---\"\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.phone\n          })]\n        }), _jsxs(View, {\n          style: Styles.personListItemButtons,\n          children: [_jsx(MyButton, {\n            text: \"Info\",\n            type: \"major\",\n            size: \"small\",\n            onPress: function onPress() {\n              showViewPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            onPress: function onPress() {\n              showEditPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              deletePerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"defualt\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      styel: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        stype: Styles.personList,\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","SafeAreaView","showMessage","NetInfo","Settings","RoiGetPeople","RoiDeletePerson","RoiAddPerson","RoiGetDepartments","RoiUpdatePerson","RoiGetPerson","PopupOk","PopupOkCancel","TextParagraph","TextH1","Styles","MyButton","ViewPeopleScreen","props","useState","people","setPeople","useEffect","refreshPersonList","displayConnectionMessage","then","data","catch","error","showAddPerson","navigation","replace","screen","showViewPerson","person","navigate","id","showEditPerson","deletePerson","name","fetch","status","isConnected","message","description","type","duration","displayPeople","map","p","personListItem","personListItemDetails","personListItemName","personListItemText","department","phone","personListItemButtons","personListItemButton","personListItemButtonText","safeAreaView","personButtonContainer","container","contentContainer","marginTop","personList"],"sources":["C:/Users/ioris/Desktop/RoiFrontend/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { showMessage } from \"react-native-flash-message\";\nimport NetInfo from \"@react-native-community/netinfo\";\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiGetPeople, RoiDeletePerson, RoiAddPerson, RoiGetDepartments, RoiUpdatePerson, RoiGetPerson } from '../utils/Api';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\n\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this componet\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n  \n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n\n  // Refresh the person list data - call the API\n  function refreshPersonList(){\n\n    // Display flash message when therr's a connection issue\n    displayConnectionMessage()\n    \n    // Cancel if no people to display\n    if (!people) return\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error =>{\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n    // Store results in state variable\n    setPeople(people)\n\n  }\n\n  function showAddPerson() {\n    props.navigation.replace(\"Root\", {screen: \"AddPerson\"})\n\n  }\n\n  function showViewPerson(person) {\n\n    // Navigate to ViewPerson and pass through the person's ID as a param\n    props.navigation.navigate(\"ViewPerson\", {id: person.id})\n  }\n\n  function showEditPerson(person) {\n\n    // Navigate to EditPerson and pass through the person's ID as a param\n    props.navigation.navigate(\"EditPerson\", {id: person.id})\n  }\n\n  \n  /**\n   * Delete a person from the database.\n   * @param {Person} person The person to delete. \n   */\n  function deletePerson(person){\n\n    // Check if person should be deleted (confirm with user)\n    PopupOkCancel(\n\n      // Title and message\n      \"Delete person?\",\n      `Are you sure you want to delete ${person.name}?`,\n      \n      // Ok - delete the person\n      () => {\n        \n        // Delete the person using the API\n        RoiDeletePerson(person.id)\n          .then(data => {\n            // Show confirmation that the person has bee deleted\n            PopupOk(\"Person deleted\", `${person.name} has been deleted.`)\n            // Refresh the person list\n            refreshPersonList()\n        \n        })\n          .catch(error => {\n\n            // Diplay error to user\n            PopupOk(\"Error\", error)\n          })\n\n        },  \n      // Cancel - do nothing\n      () => {}\n\n      )\n  }\n\n  // Diplay flash message banner if offline\n  function displayConnectionMessage(){\n\n    // Get network connection status\n    NetInfo.fetch().then(status => {\n\n      // Check if not connected to the Internet\n      if(!status.isConnected){\n\n        // Display the flash message\n        showMessage({\n          message: \"No internet connection\",\n          description: \"You will only see cached data until you have an active internet connection again.\",\n          type: \"warning\",\n          duration: 4000,\n\n        })\n      }\n    })\n  }\n  \n  // Display all people data\n  function displayPeople(){\n\n    // Cancel if no people to display\n    if(!people) return\n\n    // Loop through each item and turn into appropriate output and tehn return the result\n    return people.map(p => {\n\n      // Create an output view for each item\n      return( \n        <View key={p.id} style={Styles.personListItem}>\n          <View style={Styles.personListItemDetails}>\n            <TextParagraph style={Styles.personListItemName}>{p.name}</TextParagraph>\n            <TextParagraph style={Styles.personListItemText}>{p.department?.name ?? \"---\"}</TextParagraph>\n            <TextParagraph style={Styles.personListItemText}>{p.phone}</TextParagraph>\n          </View>\n          <View style={Styles.personListItemButtons}>\n            {/* buttons */}\n            <MyButton \n              text = \"Info\"\n              type=\"major\"  // default*|major|minor\n              size=\"small\"  // small|medium*|large\n              onPress={() => {showViewPerson(p)}}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n              />\n            <MyButton \n              text = \"Edit\"\n              type=\"default\"  // default*|major|minor\n              size=\"small\"  // small|medium*|large\n              onPress={() => {showEditPerson(p)}}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n              />\n            <MyButton \n              text = \"Delete\"\n              type=\"minor\"  // default*|major|minor\n              size=\"small\"  // small|medium*|large\n              onPress={() => {deletePerson(p)}}\n              buttonStyle={Styles.personListItemButton}\n              textStyle={Styles.personListItemButtonText}\n            />\n          </View>\n          \n        </View>\n      )\n    })\n  \n  }\n  \n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text = \"+Add new person\"\n          type=\"major\"  // default*|major|minor\n          size=\"small\"  // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n        text = \"Refresh\"\n        type=\"defualt\"  // default*|major|minor\n        size=\"small\"  // small|medium*|large\n        onPress={refreshPersonList}\n        />\n      </View>\n\n      <ScrollView styel={Styles.container} contentContainerStyle={Styles.contentContainer}>\n        \n      <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n        <View stype={Styles.personList}>\n          {displayPeople()}\n\n        </View>\n      </ScrollView>\n\n\n    </SafeAreaView>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}