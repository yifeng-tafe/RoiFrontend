{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { DEVICE_CONNECTIVITY_EVENT } from \"./privateTypes\";\nimport { NetInfoStateType, NetInfoCellularGeneration } from \"./types\";\nvar connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\nvar typeMapping = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other\n};\nvar effectiveTypeMapping = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g']\n};\n\nvar _getCurrentState = function getCurrentState(_requestedInterface) {\n  var isConnected = navigator.onLine;\n  var baseState = {\n    isInternetReachable: null\n  };\n\n  if (!connection) {\n    if (isConnected) {\n      var _state2 = _objectSpread(_objectSpread({}, baseState), {}, {\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false\n        }\n      });\n\n      return _state2;\n    }\n\n    var _state = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null\n    });\n\n    return _state;\n  }\n\n  var isConnectionExpensive = connection.saveData;\n  var type = connection.type ? typeMapping[connection.type] : isConnected ? NetInfoStateType.other : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    var _state3 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive\n      }\n    });\n\n    return _state3;\n  } else if (type === NetInfoStateType.cellular) {\n    var _state4 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        cellularGeneration: effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null\n      }\n    });\n\n    return _state4;\n  } else if (type === NetInfoStateType.ethernet) {\n    var _state5 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        ipAddress: null,\n        subnet: null\n      }\n    });\n\n    return _state5;\n  } else if (type === NetInfoStateType.wifi) {\n    var _state6 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null\n      }\n    });\n\n    return _state6;\n  } else if (type === NetInfoStateType.wimax) {\n    var _state7 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: true,\n      type: type,\n      details: {\n        isConnectionExpensive: isConnectionExpensive\n      }\n    });\n\n    return _state7;\n  } else if (type === NetInfoStateType.none) {\n    var _state8 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: false,\n      isInternetReachable: false,\n      type: type,\n      details: null\n    });\n\n    return _state8;\n  } else if (type === NetInfoStateType.unknown) {\n    var _state9 = _objectSpread(_objectSpread({}, baseState), {}, {\n      isConnected: isConnected,\n      isInternetReachable: null,\n      type: type,\n      details: null\n    });\n\n    return _state9;\n  }\n\n  var state = _objectSpread(_objectSpread({}, baseState), {}, {\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive: isConnectionExpensive\n    }\n  });\n\n  return state;\n};\n\nvar handlers = [];\nvar nativeHandlers = [];\nvar RNCNetInfo = {\n  addListener: function addListener(type, handler) {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT:\n        {\n          var nativeHandler = function nativeHandler() {\n            handler(_getCurrentState());\n          };\n\n          if (connection) {\n            connection.addEventListener('change', nativeHandler);\n          } else {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n\n          handlers.push(handler);\n          nativeHandlers.push(nativeHandler);\n          break;\n        }\n    }\n  },\n  removeListeners: function removeListeners(type, handler) {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT:\n        {\n          var index = handlers.indexOf(handler);\n          var nativeHandler = nativeHandlers[index];\n\n          if (connection) {\n            connection.removeEventListener('change', nativeHandler);\n          } else {\n            window.addEventListener('online', nativeHandler);\n            window.addEventListener('offline', nativeHandler);\n          }\n\n          handlers.splice(index, 1);\n          nativeHandlers.splice(index, 1);\n          break;\n        }\n    }\n  },\n  getCurrentState: function getCurrentState(requestedInterface) {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", _getCurrentState(requestedInterface));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  configure: function configure() {\n    return;\n  }\n};\nexport default RNCNetInfo;","map":{"version":3,"sources":["nativeModule.web.ts"],"names":["connection","window","typeMapping","bluetooth","NetInfoStateType","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","NetInfoCellularGeneration","getCurrentState","_requestedInterface","isConnected","navigator","baseState","isInternetReachable","state","type","details","isConnectionExpensive","cellularGeneration","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","handlers","nativeHandlers","RNCNetInfo","addListener","nativeHandler","handler","removeListeners","index","configure"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  NetInfoNativeModule,\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoNoConnectionState,\n  NetInfoCellularState,\n  NetInfoBluetoothState,\n  NetInfoEthernetState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n  NetInfoOtherState,\n  NetInfoCellularGeneration,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n\n// Check if the browser supports the connection API\nconst connection =\n  window.navigator.connection ||\n  window.navigator.mozConnection ||\n  window.navigator.webkitConnection;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = navigator.onLine;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler, false);\n          window.addEventListener('offline', nativeHandler, false);\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          window.addEventListener('online', nativeHandler);\n          window.addEventListener('offline', nativeHandler);\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"]},"metadata":{},"sourceType":"module"}