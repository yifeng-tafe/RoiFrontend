{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport moment from 'moment';\n\nvar CacheItem = _createClass(function CacheItem(value) {\n  _classCallCheck(this, CacheItem);\n\n  this.value = value;\n  this.timeStamp = Date.now();\n});\n\n;\n\nvar AsyncCache = function () {\n  function AsyncCache() {\n    _classCallCheck(this, AsyncCache);\n\n    this.cachePrefix = 'cache-';\n    this.ttlMinutes = 5;\n  }\n\n  _createClass(AsyncCache, [{\n    key: \"isExpired\",\n    value: function isExpired(item) {\n      var now = moment(Date.now());\n      var storedTime = moment(item.timeStamp);\n      return now.diff(storedTime, 'minutes') > this.ttlMinutes;\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      var item;\n      return _regeneratorRuntime.async(function setItem$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              item = new CacheItem(value);\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(this.cachePrefix + key, JSON.stringify(item)));\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(_context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 6]], Promise);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      var value, item;\n      return _regeneratorRuntime.async(function getItem$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(this.cachePrefix + key));\n\n            case 3:\n              value = _context2.sent;\n              item = JSON.parse(value);\n\n              if (item) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 7:\n              if (!this.isExpired(item)) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem(this.cachePrefix + key));\n\n            case 10:\n              return _context2.abrupt(\"return\", null);\n\n            case 11:\n              return _context2.abrupt(\"return\", item.value);\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 14]], Promise);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      return _regeneratorRuntime.async(function removeItem$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.removeItem(this.cachePrefix + key));\n\n            case 3:\n              _context3.next = 8;\n              break;\n\n            case 5:\n              _context3.prev = 5;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error(_context3.t0);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, [[0, 5]], Promise);\n    }\n  }, {\n    key: \"removeAllItems\",\n    value: function removeAllItems() {\n      var _this = this;\n\n      var allKeys, cacheKeys;\n      return _regeneratorRuntime.async(function removeAllItems$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n            case 3:\n              allKeys = _context4.sent;\n              cacheKeys = allKeys.filter(function (k) {\n                return k.startsWith(_this.cachePrefix);\n              });\n\n              if (!cacheKeys) {\n                _context4.next = 8;\n                break;\n              }\n\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(AsyncStorage.multiRemove(cacheKeys));\n\n            case 8:\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error(_context4.t0);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 10]], Promise);\n    }\n  }]);\n\n  return AsyncCache;\n}();\n\nexport default new AsyncCache();","map":{"version":3,"names":["AsyncStorage","moment","CacheItem","value","timeStamp","Date","now","AsyncCache","cachePrefix","ttlMinutes","item","storedTime","diff","key","setItem","JSON","stringify","console","error","getItem","parse","isExpired","removeItem","getAllKeys","allKeys","cacheKeys","filter","k","startsWith","multiRemove"],"sources":["C:/Users/ioris/Desktop/RoiFrontend/utils/Caching.js"],"sourcesContent":["/** \r\n * The Caching module provides\r\n */\r\n\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport moment from 'moment';\r\n\r\n\r\n/**\r\n * @class\r\n * An item to add to the cache with a value and timestamp (for determining cache invalidation).\r\n */\r\nclass CacheItem {\r\n    /**\r\n     * \r\n     * @param {object} value The value to store in the cache.\r\n     */\r\n    constructor(value) {\r\n        /** @public The value to store in the cache. */\r\n        this.value = value;\r\n\r\n        /** @public JS timestamp when the item was created. */\r\n        this.timeStamp = Date.now();\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * @class\r\n * Handles local caching of data using AsyncStorage.\r\n */\r\nclass AsyncCache\r\n{\r\n\r\n    /** The prefix string to add to all cached items in AsyncStorage. */\r\n    cachePrefix = 'cache-';\r\n    \r\n    /** The TTL (time to live) value in minutes for all cached items. */\r\n    ttlMinutes = 5;\r\n\r\n\r\n    /**\r\n     * @private\r\n     * Check if a cache item has expired (longer than TTL) and needs to be refreshed.\r\n     * @param {CacheItem} item Cache item to check expiry for.\r\n     * @returns {bool} True if item has expired (not updated for longer than TTL).\r\n     */\r\n    isExpired(item) {\r\n        const now = moment(Date.now());\r\n        const storedTime = moment(item.timeStamp);\r\n        return now.diff(storedTime, 'minutes') > this.ttlMinutes;\r\n    }\r\n\r\n\r\n    /**\r\n     * Store an item in the cache.\r\n     * @param {string} key Key to reference cached item.\r\n     * @param {object} value The value to cache.\r\n     */\r\n    async setItem(key, value) {\r\n        const item = new CacheItem(value);\r\n        \r\n        try {\r\n            // Set item in async storage\r\n            await AsyncStorage.setItem(this.cachePrefix + key, JSON.stringify(item));\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieve an item from the cache.\r\n     * @param {string} key Key to reference cached item.\r\n     */\r\n    async getItem(key) {\r\n\r\n        try {\r\n            // Get item from async storage\r\n            const value = await AsyncStorage.getItem(this.cachePrefix + key);\r\n            const item = JSON.parse(value);\r\n\r\n            // No item found, return null\r\n            if (!item) return null;\r\n            \r\n            // Item expired, return null\r\n            if (this.isExpired(item)) {\r\n                await AsyncStorage.removeItem(this.cachePrefix + key);\r\n                return null;\r\n            }\r\n\r\n            // Return item value\r\n            return item.value;\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Remove an item from the cache.\r\n     * @param {string} key Key to reference cached item.\r\n     */\r\n    async removeItem(key) {\r\n        try {\r\n            \r\n            // Remove item\r\n            await AsyncStorage.removeItem(this.cachePrefix + key);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Removes all items from the cache.\r\n     */\r\n    async removeAllItems() {\r\n        try {\r\n\r\n            // Get all items from async storage\r\n            const allKeys = await AsyncStorage.getAllKeys();\r\n\r\n            // Filter to only include cache items\r\n            const cacheKeys = allKeys.filter(k => k.startsWith(this.cachePrefix))\r\n            \r\n            // Remove all cache items\r\n            if (cacheKeys) {\r\n                await AsyncStorage.multiRemove(cacheKeys);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AsyncCache();"],"mappings":";;;AAIA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;IAOMC,S,gBAKF,mBAAYC,KAAZ,EAAmB;EAAA;;EAEf,KAAKA,KAAL,GAAaA,KAAb;EAGA,KAAKC,SAAL,GAAiBC,IAAI,CAACC,GAAL,EAAjB;AACH,C;;AACJ;;IAOKC,U;;;;SAIFC,W,GAAc,Q;SAGdC,U,GAAa,C;;;;;WASb,mBAAUC,IAAV,EAAgB;MACZ,IAAMJ,GAAG,GAAGL,MAAM,CAACI,IAAI,CAACC,GAAL,EAAD,CAAlB;MACA,IAAMK,UAAU,GAAGV,MAAM,CAACS,IAAI,CAACN,SAAN,CAAzB;MACA,OAAOE,GAAG,CAACM,IAAJ,CAASD,UAAT,EAAqB,SAArB,IAAkC,KAAKF,UAA9C;IACH;;;WAQD,iBAAcI,GAAd,EAAmBV,KAAnB;MAAA;MAAA;QAAA;UAAA;YAAA;cACUO,IADV,GACiB,IAAIR,SAAJ,CAAcC,KAAd,CADjB;cAAA;cAAA;cAAA,iCAKcH,YAAY,CAACc,OAAb,CAAqB,KAAKN,WAAL,GAAmBK,GAAxC,EAA6CE,IAAI,CAACC,SAAL,CAAeN,IAAf,CAA7C,CALd;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAOQO,OAAO,CAACC,KAAR;;YAPR;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAgBA,iBAAcL,GAAd;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAI4Bb,YAAY,CAACmB,OAAb,CAAqB,KAAKX,WAAL,GAAmBK,GAAxC,CAJ5B;;YAAA;cAIcV,KAJd;cAKcO,IALd,GAKqBK,IAAI,CAACK,KAAL,CAAWjB,KAAX,CALrB;;cAAA,IAQaO,IARb;gBAAA;gBAAA;cAAA;;cAAA,kCAQ0B,IAR1B;;YAAA;cAAA,KAWY,KAAKW,SAAL,CAAeX,IAAf,CAXZ;gBAAA;gBAAA;cAAA;;cAAA;cAAA,iCAYkBV,YAAY,CAACsB,UAAb,CAAwB,KAAKd,WAAL,GAAmBK,GAA3C,CAZlB;;YAAA;cAAA,kCAamB,IAbnB;;YAAA;cAAA,kCAiBeH,IAAI,CAACP,KAjBpB;;YAAA;cAAA;cAAA;cAoBQc,OAAO,CAACC,KAAR;;YApBR;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WA6BA,oBAAiBL,GAAjB;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAIcb,YAAY,CAACsB,UAAb,CAAwB,KAAKd,WAAL,GAAmBK,GAA3C,CAJd;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAOQI,OAAO,CAACC,KAAR;;YAPR;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;WAeA;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAI8BlB,YAAY,CAACuB,UAAb,EAJ9B;;YAAA;cAIcC,OAJd;cAOcC,SAPd,GAO0BD,OAAO,CAACE,MAAR,CAAe,UAAAC,CAAC;gBAAA,OAAIA,CAAC,CAACC,UAAF,CAAa,KAAI,CAACpB,WAAlB,CAAJ;cAAA,CAAhB,CAP1B;;cAAA,KAUYiB,SAVZ;gBAAA;gBAAA;cAAA;;cAAA;cAAA,iCAWkBzB,YAAY,CAAC6B,WAAb,CAAyBJ,SAAzB,CAXlB;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAeQR,OAAO,CAACC,KAAR;;YAfR;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;;;;;AAoBJ,eAAe,IAAIX,UAAJ,EAAf"},"metadata":{},"sourceType":"module"}